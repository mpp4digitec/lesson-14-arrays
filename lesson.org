
# - Main "org-teaching" example lesson contents file. 

# - Course writing happens here. 
# - Please edit at will with org-mode (in Emacs, see http://orgmode.org/)

# - Load [[./handbook.org]] or [[./slides.org]] for generating final
# - documents, resp. for the students handbook or the slides for
# - presentation in the classroom.

# ----------
# Contents of this file is Copyright (c) Manuel P√©rez-Pi√±ar
# and subject of the terms of the [[file:LICENCE]] file.
# ----------

#+TITLE: Binary Code
#+SUBTITLE: Representing information using only 0 and 1
#+AUTHOR: Digital Technologies
#+DATE: 2023-24



# won't work for the moment
# #+REVEAL_HEAD_PREAMBLE: <style type="text/css">
# #+REVEAL_HEAD_PREAMBLE:<!--/*--><![CDATA[/*><!--*/
# #+REVEAL_HEAD_PREAMBLE: div.figure { float:right; }
# #+REVEAL_HEAD_PREAMBLE: /*]]>*/-->
# #+REVEAL_HEAD_PREAMBLE: </style>


# - Customize at will these org-reveal params:

#+REVEAL_HLEVEL: 1
# +REVEAL_THEME: league
#+REVEAL_THEME: simple
# +REVEAL_TRANS: none
#+REVEAL_TRANS: fade
#+REVEAL_SPEED: fast
#+REVEAL_MARGIN: 0.0
#+REVEAL_EXTRA_CSS: ./presentation.css
#+REVEAL_ROOT: ./reveal
# +REVEAL_TITLE_SLIDE_BACKGROUND: ./media/title-slide-background.png
# Use the jump plugin and the SVG layers display with reveal-svg-fragment
#+REVEAL_EXTRA_JS:      { src: './reveal.js-jump-plugin/jump/jump.js', async: true }, { src: './reveal.js-reveal-svg-fragment/reveal-svg-fragment.js', condition: function() { return !!document.querySelector( '[data-svg-fragment]' ); } }

# org-reveal options :
# we don't really need a local copy of d3, but in case, here's how to
# customize its location
# +REVEAL_INIT_OPTIONS: center:false, slideNumber:true, svgFragment: { d3: "./js/d3.min.js" }
#+REVEAL_INIT_OPTIONS: center:true, slideNumber:true
#+OPTIONS: reveal_title_slide:"<h1 class=\"title\">%t<h1><h2>%s</h2><h2></h2><h3>%a<h3><h3 class=\"date\">%d</h3>"


# - Customize standard common org-mode headers (but you may check those in slides.org or handout.org instead)

#+OPTIONS: tags:nil ^:nil

#+LANGUAGE: en


# - Customize HTML headers

#+REVEAL_HEAD_PREAMBLE: <meta name="copyright" content="Digital Technologies -- Manuel P√©rez-Pi√±ar -- 2023" />


# - Content here:

* Introduction

What types of information do computers store?

** Numbers

#+begin_export html
<iframe src="http://www.usalivestats.com" style="width: 100%; height: 500px;border: none;"></iframe>
#+end_export

** Text

#+begin_export html
<iframe src="https://en.wikipedia.org/wiki/Computer_architecture" style="width: 100%; height: 500px; border: none;"></iframe>
#+end_export

** Images

#+begin_export html
<img src="./media/hd.jpg" style="height: 500px">
#+end_export

** Video

#+begin_export html
<iframe width="100%" height="500px" src="https://www.youtube.com/embed/6dkiqJ_IZGw?si=igs_Y5mGm4UrIgsX" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
#+end_export

** Sound

#+begin_export html
<audio controls loop>
<source src="./media/sound.mp3" type="audio/mpeg">
</audio>
#+end_export

** Zeroes and ones

Everything is stored as a sequence of /zeroes and ones/.

#+begin_export html
<img src="./media/zeroesandones.jpg" style="height: 500px">
#+end_export

* Binary code

System for representing information using only two symbols:

#+begin_export html
<p style="font-size: 2em;font-family: Courier; color: rgb(200, 127, 90)">0,1</p>
#+end_export

#+begin_notes
Be aware that 0 and 1 are only names for those two symbols we'll use to represent information. Those names have nothing to do with their real physical representation inside the computer's memory.
#+end_notes

* Natural numbers

#+begin_notes
Natural numbers are the numbers we use for counting: 0, 1, 2, 3,...

Technically speaking, 0 is not a natural number, but we'll consider it natural here, for simplicity.

The representation of natural numbers will be the basis for the representation of other types of information.
#+end_notes

** Digits and sequences
- *Sequence*: =1234=
- *Digit*: each symbol in a sequence.

#+begin_notes :teachersonly:
We have only 10 different symbols: 0, 1, 2,... 9.

Count passed 9... we ran out of symbols... we add a digit.

Count passed 99... we ran out of symbols... we add a digit.

We use sequences of symbols: this way, we can represent infinite things with a limited amount of symbols.
#+end_notes

#+begin_notes
Natural numbers are the numbers we use to count: 0, 1, 2, 3, 4,...

We only have ten different symbol for representing these numbers: 0, 1, 2,..., 9.

To represent bigger quantities, we use sequences of these symbols, like 1234. Each symbol in a sequence is called a digit.

Combining the symbols into sequences allows us to represent infinite numbers, as long as the length of the sequence is unlimited. For example, with 3-digit sequences we can write 10x10x10=1,000 different numbers, which are: 0, 1, 2,... 999 (we don't usually write the leading zeroes: 000, 001, 002,...).
#+end_notes

** Counting with only two symbols

#+begin_export html
<div style="height: 500px; width: 100%; border-width: 2px"></div>
#+end_export

#+begin_notes
  0

  1

 10

 11

100

101

110

111
#+end_notes

#+begin_notes
The system we use with two symbols is the same: build sequences. Even with only two symbols, there are 4 different 2-digit sequences, 8 different 3 digit-sequences, etc.
#+end_notes

** Position values: decimal numbers

#+begin_export html
<h2 style="font-size: 5em; font-family: Courier">2 2 2 2</h2>
#+end_export

#+begin_export html
<div style="height: 500px; width: 100%; border-width: 2px"></div>
#+end_export

#+begin_notes
The value of a digit depends on its position in the sequence.

- the value of the right-most 2 is 2 (2 times 1);
- the value of the next 2 is 20 (2 times 10);
- the value of the third 2 is 200 (2 times 10 times 10);
- the value of the left-most 2 is 2000 (2 times 10 to the third).

Every time we shift one position to the left, we multiply the value by ten. This is due to the fact that when we add a digit, the number of different combinations is multiplied by 10, because there are 10 different symbols.
#+end_notes

** Position values: binary numbers

#+begin_export html
<h2 style="font-size: 5em; font-family:Courier">1 1 1 1</h2>
#+end_export

#+begin_export html
<div style="height: 500px; width: 100%; border-width: 2px"></div>
#+end_export

#+begin_notes
The system is the same as with decimal numbers. There are two differences:
- we only have =0= and =1=: the value of a digit is either zero, or the value of its position;
- every time we shift one position to the left, we multiply the value by two (because, the number of different combinations is increased by a factor of two).
#+end_notes

** ~Binary~ ‚û°Ô∏è decimal

| / | <   | <> | <> | <> | <> | <> | <> | <> |
|---+-----+----+----+----+----+----+----+----|
|   | 128 | 64 | 32 | 16 |  8 |  4 |  2 |  1 |
|---+-----+----+----+----+----+----+----+----|
|   |   1 |  0 |  1 |  1 |  0 |  1 |  0 |  1 |
|---+-----+----+----+----+----+----+----+----|
|   |     |    |    |    |    |    |    |    |
|---+-----+----+----+----+----+----+----+----|

#+begin_notes
128 + 32 + 16 + 4 + 1 = 181

We don't have to take into account the zeroes, because their value is zero!
#+end_notes

** üìù Exercise

#+begin_export html
<div style="font-size: 2em"><code>1 1 0 1 1 1 0 0</code></span>
#+end_export

#+begin_notes
128 + 64 + 16 + 8 + 4 = 220
#+end_notes

** üìù Exercise

#+begin_export html
<div style="font-size: 2em"><code>0 0 0 1 0 1 1 1</code></span>
#+end_export

#+begin_notes
16 + 4 + 2 + 1 = 23
#+end_notes

** üìù Exercise

Which is the biggest 8-digit binary number?

#+begin_notes
The biggest 8-bit binary number is:

1111 1111

Whose value is:

128 + 64 + 32 + 16 + 8 + 4 + 2 + 1 = 255

It's the immediately preceding number to:

0001 0000 0000

Whose value is: 256 (2^8)
#+end_notes

** Decimal ‚û°Ô∏è ~binary~ (subtract method)

Code in binary the number: 221

#+begin_notes
1. Find the biggest power of two smaller than the number.
2. Add a =1= digit to the position corresponding to that power of two.
3. Subtract that power of two from the number.
4. Repeat the process with the reminder of the subtraction, until the reminder is =0=.

221 - 128 = 93

93 - 64 = 29

29 - 16 = 13

13 - 8 = 5

5 - 4 = 1

1 - 1 = 0

221 = 128 + 64 + 16 + 8 + 4 + 1

221 = 1 1 0 1 1 1 0 1
#+end_notes

** üìù Exercise

Code in binary the number: 118

#+begin_notes
118 - 64 = 54

54 - 32 = 22

22 - 16 = 6

6 - 4 = 2

2 - 2 = 0

118 = 64 + 32 + 16 + 4 + 2

118 = 0 1 1 1 0 1 1 0
#+end_notes

** Decimal ‚û°Ô∏è ~binary~ (division method)

Code in binary the number 221 using the division method.

#+begin_notes
1. Divide the number by 2.
2. Write down the reminder.
3. Replace the number by the quotient, and repeat the process until the quotient is =0=.
4. üìù Write all the reminders in reverse order.

221 / 2 = 110 r: 1

110 / 2 = 55 r: 0

55 / 2 = 27 r: 1

27 / 2 = 13 r: 1

13 / 2 = 6 r: 1

6 / 2 = 3 r: 0

3 / 2 = 1 r: 1

1 / 2 = 0 r: 1

221 = 1 1 0 1 1 1 0 1
#+end_notes

** üìù Exercise

Code in binary the number: 118


#+begin_notes
118 / 2 = 59 r: 0

59 / 2 = 29 r: 1

29 / 2 = 14 r: 1

14 / 2 = 7 r: 0

7 / 2 = 3 r: 1

3 / 2 = 1 r: 1

1/ 2 = 0 r: 1

118 = 1 1 1 0 1 1 0
#+end_notes

* Information units

- 1 bit = 1 binary digit
- 1 byte = 8 bits
- 1 Kilobyte (1 Kb) = $2^{10}$ bytes = 1,024 b \approx 1,000 b
- 1 Megabyte (1 Mb) = $2^{10}$ Kb \approx 1 million bytes
- 1 Gigabyte (1 Gb) = $2^{10}$ Mb \approx 1 billion bytes
- 1 Terabyte (1 Tb) = $2^{10}$ Gb \approx 1 trillion bytes

** Storage size

- /El Quijote/: 2,034,611 characters (\approx 2 Mb).
- Picture of 1MP in JPG: approx. 0.5Mb.
- Video HD 60FPS: 200Mb/minute.

* Texts

** Characters

- *Character*: symbols that make up the written text.
- *Text*: a sequence of characters.

[[./media/string.png]]

** Text binary code

a = ~0~; b = ~1~; c = ~10~; d = ~11~; e = ~100~; f = ~101~; g = ~110~

Code: ~110100110~

Meaning?

[[./media/text-ambiguity.png]]

Where does each character start and end?

** Fixed-length code

a = ~000~; b = ~001~; c = ~010~; d = ~011~;

e = ~100~; f = ~101~; g = ~110~

Code: ~110100110~

Meaning?

[[./media/fixed-length-code.png]]

#+begin_notes
Problem: waste of bits.


Optimal solution. /Huffman codes/ (don't repeat the start).
a = 00; b = 01; c = 100; d = 101; e = 1100; f = 1101; g = 1110

1000011101100
#+end_notes

** ASCII

#+begin_export html
<img src="./media/ascii-table.png" width="100%" height="500px">
#+end_export

#+begin_notes
ASCII stands for American Standard Code for Information Interchange

The table shown is quite old. It's still in use in some applications, but it has mostly been replaced by other coding systems, especially by Unicode.

Most of the first 32 codes are not really characters, but codes used by the computer to communicate with the screen while sending the actual characters to be printed on it.

The length is fixed: 8 bits.
#+end_notes

** Example

~Hello, world!~

~72 101 108 108 111 44 32 119 111 114 108 100 33~

~01001000 01100101 01101100 01101100 01101111 00101100 00100000 01110111 01101111 01110010 01101100 01100100 00100001~

#+begin_notes
Remember that the length is fixed: if the number is smaller than 128, you should put some leading zeroes.
#+end_notes

** üìù Exercise

Code in 8-bit ASCII: ~IPv4~

#+begin_export html
<div style="height: 500px; width: 100%; border-width: 2px"></div>
#+end_export

#+begin_notes
073 080 118 052

01001001 01010000 01110110 00110100
#+end_notes


* Images

** Bitmap images (raster graphics)

  #+begin_export html
  <div style="display: grid; grid-template-columns: 50% 50%">
  <div><img src="./media/tigerlr.jpg"></div>
  <div><img src="./media/tigerdetail.png"></div>
  </div>
  #+end_export

#+begin_notes :teachersonly:
Image is made up of small squares of a specific color, called pixels.

When I zoom in, I see the pixels.

Good for photographs (real images).
#+end_notes

** Vector graphics

  #+begin_export html
  <div style="display: grid; grid-template-columns: 50% 50%">
  <div><img src="./media/vector.svg"></div>
  <div><img src="./media/svgdetail.png"></div>
  </div>
  #+end_export

#+begin_notes :teachersonly:
Images are made up of geometric shapes.

I can zoom in as much as I want. Will never lose detail.

God for drawings and text.
#+end_notes

** Bitmap images

Pixel = Picture element

Pixel size = width (px) x height (px)


** Color

RGB = Red Green Blue

1 byte per color = 3 bytes per pixel

Example: ~11111111 11111111 00000000~ = yellow (red + green)

** Color depth

*Color depth* = number of bits per pixel

RGB = 24 bits/px

üìù How many different colors can be represented?

üìù How much memory occupies a 800x600 px image?


#+begin_notes
How many different colors can be represented this way?

256 x 256 x 256 = 2^24 = 16 x 2^20 = 16,000,000 (aprox)

üìù How much memory occupies a 800x600 px image?

800 x 600 = 480,000 px

480,000 x 3 = 1,440,000 bytes = 1.34 Mb

But there's compression.
#+end_notes


** Color Picker

#+begin_export html
<input type="color">
<div style="height: 500px; width: 100%; border-width: 2px"></div>
#+end_export


** Transparency

*Alpha Channel*: 1 byte for opacity.

*RGBA* = RGB + Alpha Channel

4 bytes per pixel

*JPG* ‚ùå no alpha channel

*PNG* ‚ùî optional alpha channel
